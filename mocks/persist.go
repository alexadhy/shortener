// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alexadhy/shortener/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Persist is an autogenerated mock type for the Persist type
type Persist struct {
	mock.Mock
}

// Expire provides a mock function with given fields: ctx
func (_m *Persist) Expire(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, key
func (_m *Persist) Get(ctx context.Context, key string) (*model.ShortenedData, error) {
	ret := _m.Called(ctx, key)

	var r0 *model.ShortenedData
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ShortenedData); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShortenedData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, data
func (_m *Persist) Set(ctx context.Context, data *model.ShortenedData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ShortenedData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPersist creates a new instance of Persist. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersist(t testing.TB) *Persist {
	mock := &Persist{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
